{"version":3,"sources":["index.tsx"],"names":["document","body","appendChild","createElement","setAttribute","Streamlit","events","addEventListener","RENDER_EVENT","event","data","detail","LabelStudio","config","args","interfaces","user","task","onLabelStudioLoad","ls","c","completionStore","addCompletion","userGenerate","selectCompletion","id","onSubmitCompletion","completion","console","log","JSON","parse","stringify","setComponentValue","setFrameHeight","setComponentReady"],"mappings":"gKAAA,+BAIaA,SAASC,KAAKC,YAAYF,SAASG,cAAc,SAC1CD,YAAYF,SAASG,cAAc,QAChDC,aAAa,KAAM,gBA2C1BC,IAAUC,OAAOC,iBAAiBF,IAAUG,cAlC5C,SAAkBC,GAChB,IAAMC,EAAQD,EAAkCE,OAEvC,IAAIC,cAAY,eAAgB,CACvCC,OAAQH,EAAKI,KAAL,OACRC,WAAYL,EAAKI,KAAL,WAAwB,GACpCE,KAAMN,EAAKI,KAAL,KAAkB,GACxBG,KAAMP,EAAKI,KAAL,KAENI,kBAAmB,SAASC,GAC1B,IAAIC,EAAID,EAAGE,gBAAgBC,cAAc,CACvCC,cAAc,IAEhBJ,EAAGE,gBAAgBG,iBAAiBJ,EAAEK,KAGxCC,mBAAoB,SAASP,EAAIQ,GAC/BC,QAAQC,IAAIV,GACZQ,EAAaG,KAAKC,MAAMD,KAAKE,UAAUL,IACvCtB,IAAU4B,kBAAkBN,MAUhCtB,IAAU6B,oBAQZ7B,IAAU8B,oBAIV9B,IAAU6B,mB","file":"static/js/main.26a52596.chunk.js","sourcesContent":["import { Streamlit, RenderData } from \"streamlit-component-lib\"\nimport {LabelStudio} from 'label-studio';\nimport 'label-studio/build/static/css/main.css';\n\nconst span = document.body.appendChild(document.createElement(\"span\"))\nconst ls_div = span.appendChild(document.createElement(\"div\"))\nls_div.setAttribute(\"id\", \"label-studio\");\n\n\n\n/**\n * The component's render function. This will be called immediately after\n * the component is initially loaded, and then again every time the\n * component gets new data from Python.\n */\nfunction onRender(event: Event): void {\n  const data = (event as CustomEvent<RenderData>).detail\n  \n  var ls = new LabelStudio('label-studio', {\n    config: data.args[\"config\"],\n    interfaces: data.args[\"interfaces\"][0],\n    user: data.args[\"user\"][0],\n    task: data.args[\"task\"],\n    \n    onLabelStudioLoad: function(ls) {\n      var c = ls.completionStore.addCompletion({\n        userGenerate: true\n      });\n      ls.completionStore.selectCompletion(c.id);\n    },\n    \n    onSubmitCompletion: function(ls, completion) {\n      console.log(ls)\n      completion = JSON.parse(JSON.stringify(completion));\n      Streamlit.setComponentValue(completion)\n    },\n    \n    \n  });\n  \n  // We tell Streamlit to update our frameHeight after each render event, in\n  // case it has changed. (This isn't strictly necessary for the example\n  // because our height stays fixed, but this is a low-cost function, so\n  // there's no harm in doing it redundantly.)\n  Streamlit.setFrameHeight()\n}\n\n\n// Attach our `onRender` handler to Streamlit's render event.\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\n// Tell Streamlit we're ready to start receiving data. We won't get our\n// first RENDER_EVENT until we call this function.\nStreamlit.setComponentReady()\n\n// Finally, tell Streamlit to update our initial height. We omit the\n// `height` parameter here to have it default to our scrollHeight.\nStreamlit.setFrameHeight()\n"],"sourceRoot":""}